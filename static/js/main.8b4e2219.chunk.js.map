{"version":3,"sources":["Components/ErrorBoundary.tsx","Helpers/Logger.tsx","Helpers/ResultHelper.tsx","Components/Row/Row.tsx","Components/Results/index.tsx","Components/SearchBar/index.tsx","Components/Hompage/index.tsx","Defaults.tsx","App.js","reportWebVitals.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","message","console","log","Date","toISOString","this","className","children","React","Component","checkResult","searchText","result","searchString","toLowerCase","email","includes","name","role","diplayableResults","results","pageNumber","filteredResults","filter","length","slice","Row","resultProps","useState","updatedData","setUpdatedData","updateData","value","editable","type","checked","onChange","e","UpdateResult","id","target","placeholder","onClick","editRow","icon","faCheck","DeleteRecord","faTrash","faEdit","index","Results","editableRows","setEditableRows","setPageNumber","data","updateResults","deepCopyResults","JSON","parse","stringify","findIndex","UpdateRowEditable","useEffect","serachString","map","i","document","getElementById","paginationButtons","resultsLength","push","getPaginationButtons","SearchBar","inputRef","useRef","ref","handleSearchProps","current","faSearch","HomPage","setSearchText","setResults","fetch","method","then","res","a","json","catch","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2XAIqBA,E,kDAMjB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IALRC,MAAQ,CACJC,UAAU,GAGU,E,qDAQxB,SAAkBC,EAAYC,GCfZ,IAACC,IDgBVD,ECfTE,QAAQC,KAAK,IAAIC,MAAOC,cAAiB,QAAUJ,K,oBDkBnD,WACE,OAAIK,KAAKT,MAAMC,SAET,qBAAKS,UAAU,eAAf,mCAMCD,KAAKV,MAAMY,Y,uCAjBpB,SAAgCT,GAC9B,MAAO,CAAED,UAAU,O,GAXkBW,IAAMC,W,sDEFpCC,EAAc,SAACC,EAAoBC,GAC5C,IAAMC,EAAeF,EAAWG,cAChC,OAAOF,EAAOG,MAAMD,cAAcE,SAASH,IAChCD,EAAOK,KAAKH,cAAcE,SAASH,IACnCD,EAAOM,KAAKJ,cAAcE,SAASH,IAGrCM,EAAoB,SAACC,EAA4BC,EAAoBR,GAC9E,IAAMS,EAAkBF,EAAQG,QAAO,SAACX,GAAD,OAAwBF,EAAYG,EAAcD,MACzF,OAAGU,EAAgBE,QAAU,GAClBF,EAEAA,EAAgBG,MAAyB,IAAlBJ,EAAa,GAAU,EAAiB,GAAbA,EAAiB,I,cCPrEK,G,MAAM,SAACC,GAEhB,IAAQf,EAAWe,EAAXf,OAER,EAAsCgB,mBAAShB,GAA/C,mBAAOiB,EAAP,KAAoBC,EAApB,KAOMC,EAAa,SAACd,EAAce,GAC9BF,EAAe,2BACRD,GADO,kBAETZ,EAAOe,MAIhB,OACI,qBAAK1B,UAAU,0BAAf,SACKqB,EAAYM,SAEL,qCACI,sBAAM3B,UAAU,WAAhB,SACI,uBACI4B,KAAK,WACLC,QAASvB,EAAOuB,QAChBC,SAAU,SAACC,GAAD,OAAOV,EAAYW,aAAa1B,EAAO2B,GAAI,CAAEJ,QAASE,EAAEG,OAAOL,eAGjF,uBAAOH,MAAOH,EAAYZ,KAAMwB,YAAY,OAAOL,SAAU,SAACC,GAAD,OAAON,EAAW,OAAQM,EAAEG,OAAOR,UAChG,uBAAOA,MAAOH,EAAYd,MAAO0B,YAAY,QAAQL,SAAU,SAACC,GAAD,OAAON,EAAW,QAASM,EAAEG,OAAOR,UACnG,uBAAOA,MAAOH,EAAYX,KAAMuB,YAAY,OAAOL,SAAU,SAACC,GAAD,OAAON,EAAW,OAAQM,EAAEG,OAAOR,UAChG,uBAAM1B,UAAU,UAAhB,UACI,sBAAMA,UAAU,oBAAoBoC,QA5BzC,WACff,EAAYgB,QAAQ/B,EAAO2B,IAAI,GAC/BZ,EAAYW,aAAa1B,EAAO2B,GAAIV,IA0BhB,SACI,cAAC,IAAD,CAAiBe,KAAMC,QAE3B,sBAAMvC,UAAU,sBAAsBoC,QAAS,kBAAMf,EAAYmB,aAAalC,EAAO2B,KAArF,SACI,cAAC,IAAD,CAAiBK,KAAMG,cAMnC,qCACI,+BACI,uBACIb,KAAK,WACLC,QAASvB,EAAOuB,QAChBC,SAAU,SAACC,GAAD,OAAOV,EAAYW,aAAa1B,EAAO2B,GAAI,CAAEJ,QAASE,EAAEG,OAAOL,eAGjF,+BAAOvB,EAAOK,OACd,+BAAOL,EAAOG,QACd,+BAAOH,EAAOM,OACd,uBAAMZ,UAAU,UAAhB,UACI,sBAAMA,UAAU,oBAAoBoC,QAAS,kBAAMf,EAAYgB,QAAQ/B,EAAO2B,IAAI,IAAlF,SACI,cAAC,IAAD,CAAiBK,KAAMI,QAE3B,sBAAM1C,UAAU,sBAAsBoC,QAAS,kBAAMf,EAAYmB,aAAalC,EAAO2B,KAArF,SACI,cAAC,IAAD,CAAiBK,KAAMG,eAzCDpB,EAAYsB,SCnBrDC,G,MAAU,SAACvD,GAEpB,MAAwCiC,mBAAS,IAAjD,mBAAOuB,EAAP,KAAqBC,EAArB,KACA,EAAoCxB,mBAAS,GAA7C,mBAAOP,EAAP,KAAmBgC,EAAnB,KAaMf,EAAe,SAACC,EAAYe,GAC9B3D,EAAM4D,eAAc,SAACnC,GACjB,IAAMoC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUvC,IAC5C6B,EAAQO,EAAgBI,WAAU,SAAChD,GAAD,OAAwBA,EAAO2B,IAAMA,KAK7E,OAJAiB,EAAgBP,GAAhB,2BACOO,EAAgBP,IAChBK,GAEAE,MAITK,EAAoB,SAACtB,EAAYN,GACnCmB,EAAgB,2BACTD,GADQ,kBAEVZ,EAAKN,MAURa,EAAe,SAACP,GAClB5C,EAAM4D,eAAc,SAACnC,GAAD,OAAiCA,EAAQG,QAAO,SAAAX,GAAM,OAAIA,EAAO2B,IAAMA,SAwB/F,OAJAuB,qBAAU,WACNT,EAAc,KACf,CAAC1D,EAAMoE,eAGN,mCACKpE,EAAMyB,QAEC,qCACI,sBAAKd,UAAU,iBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,uBAAO4B,KAAK,WAAWQ,QApE3B,SAACL,GACrB1C,EAAM4D,eAAc,SAACnC,GAAD,mBACZA,EAAQ4C,KAAI,SAACpD,EAAQqD,GAAT,aACZA,GAAuB,IAAhB5C,EAAW,IAAY4C,GAAmB,GAAb5C,EAApC,2BACWT,GADX,IACmBuB,QAAO,OAAEE,QAAF,IAAEA,GAAF,UAAEA,EAAGG,cAAL,aAAE,EAAWL,UACjCvB,UA+D2D2B,GAAG,sBACpD,0CACA,2CACA,0CACA,gDAEHpB,EAAkBxB,EAAMyB,QAASC,EAAY1B,EAAMoE,cAC/CC,KAAI,SAACpD,EAAoBqC,GAArB,OACD,cAAC,EAAD,CACIhB,SAAUkB,EAAavC,EAAO2B,MAAO,EACrCD,aAAcA,EACdW,MAAOA,EACPrC,OAAQA,EAER+B,QAASkB,EACTf,aAAcA,GAFTG,SAOrB,sBAAK3C,UAAU,aAAf,UACI,qBAAKA,UAAU,+BAA+BoC,QA3DzC,WACzB/C,EAAM4D,eAAc,SAACnC,GAAD,OAAiCA,EAAQG,QAAO,SAAAX,GAAM,OAAKA,EAAOuB,cACrF+B,SAASC,eAAe,qBAA0ChC,SAAU,EAC7EkB,GAAc,SAAAhC,GAAU,OAAIA,EAAc1B,EAAMyB,QAAQI,OAAS,GAAK,EAAIH,EAAa,MAwDnE,6BAGA,qBAAKf,UAAU,qBAAf,SApDK,WACzB,IFnCuBc,EAA4BP,EEmC7CuD,EAAoB,GACtBC,GFpCmBjD,EEoCYzB,EAAMyB,QFpCUP,EEoCDlB,EAAMoE,aFnCpC3C,EAAQG,QAAO,SAACX,GAAD,OAAwBF,EAAYG,EAAcD,OEmCfY,OACtEvB,QAAQC,IAAImE,GACTA,EAAgB,GACfD,EAAkBE,KACd,uBAAMhE,UAAW,gBAAiBoC,QAAS,kBAAMW,EAAc,IAA/D,cAAqE,KAArE,QAGR,IAT+B,eAStBY,GACLG,EAAkBE,KACd,sBAAMhE,UAAW2D,GAAK5C,EAAa,EAAI,2BAA6B,gBAAiBqB,QAAS,kBAAMW,EAAcY,EAAI,IAAtH,SAA2HA,EAAI,MAF9HA,EAAI,EAAGA,EAAKI,EAAe,GAAKJ,IAAM,EAAtCA,GAKT,OAAOG,EAuCkBG,WAKf,qBAAKjE,UAAU,mBAAf,wCCxGLkE,G,MAAY,SAAC7E,GAEtB,IAAM8E,EAAWC,iBAAO,MAMxB,OACI,sBAAKpE,UAAU,mBAAf,UACI,uBAAO4B,KAAK,SAASO,YAAa,gCAAiCkC,IAAKF,IACxE,sBAAKnE,UAAU,6BAA6BoC,QAP5B,WAAO,IAAD,EAC1B/C,EAAMiF,mBAAkB,UAAAH,EAASI,eAAT,eAAkB7C,QAAS,KAM/C,UACI,cAAC,IAAD,CAAiBY,KAAMkC,MAD3B,iBCVCC,G,MAAU,WAEnB,MAAoCnD,mBAAS,IAA7C,mBAAOjB,EAAP,KAAmBqE,EAAnB,KACA,EAA8BpD,mBAAS,IAAvC,mBAAOR,EAAP,KAAgB6D,EAAhB,KAiBA,OAfAnB,qBAAU,WACNoB,MCbe,iFDeP,CACIC,OAAQ,QAGfC,KANL,uCAMU,WAAOC,GAAP,eAAAC,EAAA,sEACoBD,EAAIE,OADxB,OACInE,EADJ,OAEF6D,EAAW7D,EAAQ4C,KAAI,SAACpD,GAAD,mBAAC,eAA6BA,GAA9B,IAAsCuB,SAAS,QAFpE,2CANV,uDAUKqD,UAEN,IAGC,yBAASlF,UAAU,mBAAnB,SACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,EAAD,CAAWsE,kBAAmBI,IAC9B,cAAC,EAAD,CAASjB,aAAcpD,EAAYS,QAASA,EAASmC,cAAe0B,WEnBrEQ,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BuB,M","file":"static/js/main.8b4e2219.chunk.js","sourcesContent":["import React from \"react\";\nimport { logger } from \"../Helpers/Logger\";\nimport '../common/styles.css';\n\nexport default class ErrorBoundary extends React.Component {\n\n    state = { \n        hasError: false \n    };\n\n    constructor(props: any) {\n      super(props);\n    }\n  \n    static getDerivedStateFromError(error: any) {\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error: any, errorInfo: any) {\n      logger(errorInfo);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        return (\n            <div className=\"error center\">\n                Something went wrong.\n            </div>\n        );\n      }\n  \n      return this.props.children; \n    }\n  }","/** \n * @param {string} message - message to log\n*/\nexport const logger = (message: string | JSON | any) => {\n    console.log((new Date().toISOString()) + \" --- \" + message);\n}","import { ResultType } from \"../Components/Results/Defaults\";\n\nexport const checkResult = (searchText: string, result: ResultType) => {\n    const searchString = searchText.toLowerCase();\n    return result.email.toLowerCase().includes(searchString) \n            || result.name.toLowerCase().includes(searchString) \n            || result.role.toLowerCase().includes(searchString);\n}\n\nexport const diplayableResults = (results: Array<ResultType>, pageNumber: number, searchString: string) => {\n    const filteredResults = results.filter((result: ResultType) => checkResult(searchString, result));\n    if(filteredResults.length <= 10) {\n        return filteredResults;\n    } else {   \n        return filteredResults.slice((pageNumber - 1) * 10 + 1, (pageNumber * 10)+1)\n    }\n}\n\nexport const resultsVisible = (results: Array<ResultType>, searchString: string) => {\n    const filteredResults = results.filter((result: ResultType) => checkResult(searchString, result));\n    return filteredResults;\n}","import { faCheck, faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useState } from \"react\"\nimport { ResultType } from \"../Results/Defaults\"\n\nimport './RowStyles.css';\n\nexport const Row = (resultProps: ResultRowProps) => {\n\n    const { result } = resultProps;\n\n    const [updatedData, setUpdatedData] = useState(result);\n\n    const saveResult = () => {\n        resultProps.editRow(result.id, false);\n        resultProps.UpdateResult(result.id, updatedData);\n    }\n\n    const updateData = (name: string, value: any) => {\n        setUpdatedData({\n            ...updatedData,\n            [name]: value\n        })\n    }\n\n    return (\n        <div className=\"resultRowWrapper center\" key={resultProps.index}>\n            {resultProps.editable ?\n                (\n                    <>\n                        <span className=\"checkbox\">\n                            <input\n                                type='checkbox'\n                                checked={result.checked}\n                                onChange={(e) => resultProps.UpdateResult(result.id, { checked: e.target.checked })}\n                            />\n                        </span>\n                        <input value={updatedData.name} placeholder=\"Name\" onChange={(e) => updateData('name', e.target.value)} />\n                        <input value={updatedData.email} placeholder=\"Email\" onChange={(e) => updateData('email', e.target.value)} />\n                        <input value={updatedData.role} placeholder=\"Role\" onChange={(e) => updateData('role', e.target.value)} />\n                        <span className=\"buttons\">\n                            <span className=\"saveButton button\" onClick={saveResult}>\n                                <FontAwesomeIcon icon={faCheck} />\n                            </span>\n                            <span className=\"deleteButton button\" onClick={() => resultProps.DeleteRecord(result.id)}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                        </span>\n                    </>\n                )\n                : (\n                    <>\n                        <span>\n                            <input\n                                type='checkbox'\n                                checked={result.checked}\n                                onChange={(e) => resultProps.UpdateResult(result.id, { checked: e.target.checked })}\n                            />\n                        </span>\n                        <span>{result.name}</span>\n                        <span>{result.email}</span>\n                        <span>{result.role}</span>\n                        <span className=\"buttons\">\n                            <span className=\"editButton button\" onClick={() => resultProps.editRow(result.id, true)}>\n                                <FontAwesomeIcon icon={faEdit} />\n                            </span>\n                            <span className=\"deleteButton button\" onClick={() => resultProps.DeleteRecord(result.id)}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                        </span>\n                    </>\n                )}\n        </div>\n    )\n}\n\ninterface ResultRowProps {\n    result: ResultType;\n    UpdateResult: any;\n    editable: boolean;\n    index: number;\n    editRow: any;\n    DeleteRecord: any;\n}","import { useEffect, useState } from \"react\";\nimport { diplayableResults, resultsVisible } from \"../../Helpers/ResultHelper\";\nimport { Row } from \"../Row/Row\";\nimport { ResultProps, ResultType } from \"./Defaults\";\n\nimport './ResultsStyles.css';\n\nexport const Results = (props: ResultProps) => {\n\n    const [editableRows, setEditableRows] = useState({} as any);\n    const [pageNumber, setPageNumber] = useState(1);\n\n    const handleSelectAll = (e: any) => {\n        props.updateResults((results: Array<ResultType>) => (\n            [...results.map((result, i) => (\n                i >= ((pageNumber-1) * 10) && i <= (pageNumber * 10)\n                    ? { ...result, checked: e?.target?.checked }\n                    : result\n            )\n            )]\n        ))\n    }\n\n    const UpdateResult = (id: string, data: any) => {\n        props.updateResults((results: Array<ResultType>) => {\n            const deepCopyResults = JSON.parse(JSON.stringify(results)) as Array<ResultType>;\n            const index = deepCopyResults.findIndex((result: ResultType) => result.id == id);\n            deepCopyResults[index] = {\n                ...deepCopyResults[index],\n                ...data,\n            }\n            return deepCopyResults;\n        })\n    }\n\n    const UpdateRowEditable = (id: string, editable: boolean) => {\n        setEditableRows({\n            ...editableRows,\n            [id]: editable,\n        })\n    }\n\n    const deleteSlectedRecords = () => {\n        props.updateResults((results: Array<ResultType>) => (results.filter(result => !result.checked)));\n        (document.getElementById('allselectedButton') as HTMLInputElement).checked = false;\n        setPageNumber(pageNumber=> (pageNumber < (props.results.length / 10) -1 ? pageNumber : 1 ))\n    }\n\n    const DeleteRecord = (id: string) => {\n        props.updateResults((results: Array<ResultType>) => (results.filter(result => result.id != id)));\n    }\n\n    const getPaginationButtons = () => {\n        const paginationButtons = [];\n        let resultsLength = resultsVisible(props.results, props.serachString).length;\n        console.log(resultsLength);\n        if(resultsLength > 0) {\n            paginationButtons.push(\n                <span className={'button center'} onClick={() => setPageNumber(1)}> {'<<'} </span>\n            )\n        }\n        for (let i = 0; i < (resultsLength/ 10); i++) {\n            paginationButtons.push(\n                <span className={i == pageNumber - 1 ? 'button activePage center' : 'button center'} onClick={() => setPageNumber(i + 1)}>{i + 1}</span>\n            )\n        }\n        return paginationButtons;\n    }\n\n    useEffect(() => {\n        setPageNumber(1);\n    }, [props.serachString])\n\n    return (\n        <>\n            {props.results\n                ? (\n                    <>\n                        <div className=\"resultsWrapper\">\n                            <div className=\"resultHeading center\">\n                                <input type=\"checkbox\" onClick={handleSelectAll} id=\"allselectedButton\" />\n                                <span> Name </span>\n                                <span> Email </span>\n                                <span> Role </span>\n                                <span> Actions </span>\n                            </div>\n                            {diplayableResults(props.results, pageNumber, props.serachString)\n                                .map((result: ResultType, index: number) => (\n                                    <Row\n                                        editable={editableRows[result.id] || false}\n                                        UpdateResult={UpdateResult}\n                                        index={index}\n                                        result={result}\n                                        key={index}\n                                        editRow={UpdateRowEditable}\n                                        DeleteRecord={DeleteRecord}\n                                    />\n                                )\n                            )}\n                        </div>\n                        <div className=\"pagination\">\n                            <div className=\"deltedSeletecd button center\" onClick={deleteSlectedRecords}>\n                                Delete Selected\n                            </div>\n                            <div className=\"pageNumbers center\">\n                                {getPaginationButtons()}\n                            </div>\n                        </div>\n                    </>\n                )\n                : <div className=\"noResults center\"> Loading results......</div>\n            }\n        </>\n    );\n\n\n}","import { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useRef } from 'react';\nimport { SearchProps } from './Defaults';\nimport './SearchBarStyles.css';\n\nexport const SearchBar = (props: SearchProps) => {\n\n    const inputRef = useRef(null as unknown as HTMLInputElement);\n\n    const setSearchString = () => {\n        props.handleSearchProps(inputRef.current?.value || '');\n    }\n\n    return (\n        <div className=\"searchBarWrapper\">\n            <input type=\"search\" placeholder={\"Search By name, email or role\"} ref={inputRef} />\n            <div className=\"button searchButton center\" onClick={setSearchString}>\n                <FontAwesomeIcon icon={faSearch} />\n                Search\n            </div>\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { API_URL } from '../../Defaults';\nimport { Results } from '../Results';\nimport { ResultType } from '../Results/Defaults';\nimport { SearchBar } from '../SearchBar';\nimport './HompageStyles.css';\n\nexport const HomPage = () => {\n\n    const [searchText, setSearchText] = useState('');\n    const [results, setResults] = useState([] as Array<ResultType>);\n\n    useEffect(() => {\n        fetch(\n                API_URL, \n                {\n                    method: 'get',\n                }\n            )\n            .then(async (res) => {\n                const results = await res.json();\n                setResults(results.map((result: ResultType) => ({ ...result, checked: false })));\n            })\n            .catch();\n\n    }, []);\n\n    return (\n        <section className=\"containerWrapper\">\n            <div className=\"container center\">\n                <SearchBar handleSearchProps={setSearchText} />\n                <Results serachString={searchText} results={results} updateResults={setResults} />\n            </div>\n        </section>\n    );\n}","export const API_URL = \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\";","import './App.css';\nimport ErrorBoundary from \"./Components/ErrorBoundary\";\nimport { HomPage } from './Components/Hompage';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <HomPage />\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}