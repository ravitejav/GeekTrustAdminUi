{"version":3,"sources":["Components/ErrorBoundary.tsx","Helpers/Logger.tsx","Components/Row/Row.tsx","Components/Results/index.tsx","Components/SearchBar/index.tsx","Components/Hompage/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","message","console","log","Date","toISOString","this","className","children","React","Component","Row","resultProps","result","useState","updatedData","setUpdatedData","updateData","name","value","editable","type","checked","onChange","e","UpdateResult","id","target","placeholder","email","role","onClick","editRow","icon","faCheck","DeleteRecord","faTrash","faEdit","Results","editableRows","setEditableRows","pageNumber","setPageNumber","data","updateResults","results","deepCopyResults","JSON","parse","stringify","index","findIndex","UpdateRowEditable","filter","map","i","slice","document","getElementById","length","paginationButtons","push","getPaginationButtons","SearchBar","handleSearchProps","faSearch","HomPage","searchText","setSearchText","setResults","useEffect","fetch","method","then","res","a","json","catch","serachString","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2XAIqBA,E,kDAMjB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IALRC,MAAQ,CACJC,UAAU,GAGU,E,qDAQxB,SAAkBC,EAAYC,GCfZ,IAACC,IDgBVD,ECfTE,QAAQC,KAAK,IAAIC,MAAOC,cAAiB,QAAUJ,K,oBDkBnD,WACE,OAAIK,KAAKT,MAAMC,SAET,qBAAKS,UAAU,eAAf,mCAMCD,KAAKV,MAAMY,Y,uCAjBpB,SAAgCT,GAC9B,MAAO,CAAED,UAAU,O,GAXkBW,IAAMC,W,oEEGpCC,G,MAAM,SAACC,GAEhB,IAAQC,EAAWD,EAAXC,OAER,EAAsCC,mBAASD,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAOMC,EAAa,SAACC,EAAcC,GAC9BH,EAAe,2BACRD,GADO,kBAETG,EAAOC,MAIhB,OACI,qBAAKZ,UAAU,0BAAf,SACKK,EAAYQ,SAEL,qCACI,sBAAMb,UAAU,WAAhB,SACI,uBACIc,KAAK,WACLC,QAAST,EAAOS,QAChBC,SAAU,SAACC,GAAD,OAAOZ,EAAYa,aAAaZ,EAAOa,GAAI,CAAEJ,QAASE,EAAEG,OAAOL,eAGjF,uBAAOH,MAAOJ,EAAYG,KAAMU,YAAY,OAAOL,SAAU,SAACC,GAAD,OAAOP,EAAW,OAAQO,EAAEG,OAAOR,UAChG,uBAAOA,MAAOJ,EAAYc,MAAOD,YAAY,QAAQL,SAAU,SAACC,GAAD,OAAOP,EAAW,QAASO,EAAEG,OAAOR,UACnG,uBAAOA,MAAOJ,EAAYe,KAAMF,YAAY,OAAOL,SAAU,SAACC,GAAD,OAAOP,EAAW,OAAQO,EAAEG,OAAOR,UAChG,uBAAMZ,UAAU,UAAhB,UACI,sBAAMA,UAAU,oBAAoBwB,QA5BzC,WACfnB,EAAYoB,QAAQnB,EAAOa,IAAI,GAC/Bd,EAAYa,aAAaZ,EAAOa,GAAIX,IA0BhB,SACI,cAAC,IAAD,CAAiBkB,KAAMC,QAE3B,sBAAM3B,UAAU,sBAAsBwB,QAAS,kBAAMnB,EAAYuB,aAAatB,EAAOa,KAArF,SACI,cAAC,IAAD,CAAiBO,KAAMG,cAMnC,qCACI,+BACI,uBACIf,KAAK,WACLC,QAAST,EAAOS,QAChBC,SAAU,SAACC,GAAD,OAAOZ,EAAYa,aAAaZ,EAAOa,GAAI,CAAEJ,QAASE,EAAEG,OAAOL,eAGjF,+BAAOT,EAAOK,OACd,+BAAOL,EAAOgB,QACd,+BAAOhB,EAAOiB,OACd,uBAAMvB,UAAU,UAAhB,UACI,sBAAMA,UAAU,oBAAoBwB,QAAS,kBAAMnB,EAAYoB,QAAQnB,EAAOa,IAAI,IAAlF,SACI,cAAC,IAAD,CAAiBO,KAAMI,QAE3B,sBAAM9B,UAAU,sBAAsBwB,QAAS,kBAAMnB,EAAYuB,aAAatB,EAAOa,KAArF,SACI,cAAC,IAAD,CAAiBO,KAAMG,kBC7D1CE,G,MAAU,SAAC1C,GAEpB,MAAwCkB,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KACA,EAAoC1B,mBAAS,GAA7C,mBAAO2B,EAAP,KAAmBC,EAAnB,KAaMjB,EAAe,SAACC,EAAYiB,GAC9B/C,EAAMgD,eAAc,SAACC,GACjB,IAAMC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAC5CK,EAAQJ,EAAgBK,WAAU,SAACtC,GAAD,OAAwBA,EAAOa,IAAMA,KAK7E,OAJAoB,EAAgBI,GAAhB,2BACOJ,EAAgBI,IAChBP,GAEAG,MAITM,EAAoB,SAAC1B,EAAYN,GACnCoB,EAAgB,2BACTD,GADQ,kBAEVb,EAAKN,MAURe,EAAe,SAACT,GAClB9B,EAAMgD,eAAc,SAACC,GAAD,OAAiCA,EAAQQ,QAAO,SAAAxC,GAAM,OAAIA,EAAOa,IAAMA,SAmB/F,OACI,mCACK9B,EAAMiD,QAEC,qCACI,sBAAKtC,UAAU,iBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,uBAAOc,KAAK,WAAWU,QA/D3B,SAACP,GACrB5B,EAAMgD,eAAc,SAACC,GAAD,mBACZA,EAAQS,KAAI,SAACzC,EAAQ0C,GAAT,aACZA,GAAuB,IAAhBd,EAAW,IAAYc,GAAmB,GAAbd,EAApC,2BACW5B,GADX,IACmBS,QAAO,OAAEE,QAAF,IAAEA,GAAF,UAAEA,EAAGG,cAAL,aAAE,EAAWL,UACjCT,UA0D2Da,GAAG,sBACpD,0CACA,2CACA,0CACA,gDAEH9B,EAAMiD,QAAQW,MAAyB,IAAlBf,EAAa,GAAU,EAAiB,GAAbA,EAAiB,GAAGa,KAAI,SAACzC,EAAoBqC,GAArB,OACrE,cAAC,EAAD,CACI9B,SAAUmB,EAAa1B,EAAOa,MAAO,EACrCD,aAAcA,EACdyB,MAAOA,EACPrC,OAAQA,EAERmB,QAASoB,EACTjB,aAAcA,GAFTe,SAMjB,sBAAK3C,UAAU,aAAf,UACI,qBAAKA,UAAU,+BAA+BwB,QApDzC,WACzBnC,EAAMgD,eAAc,SAACC,GAAD,OAAiCA,EAAQQ,QAAO,SAAAxC,GAAM,OAAKA,EAAOS,cACrFmC,SAASC,eAAe,qBAA0CpC,SAAU,EAC7EoB,GAAc,SAAAD,GAAU,OAAIA,EAAc7C,EAAMiD,QAAQc,OAAS,GAAK,EAAIlB,EAAa,MAiDnE,6BAGA,qBAAKlC,UAAU,qBAAf,SA7CK,WACzB,IAAMqD,EAAoB,GACvBhE,EAAMiD,QAAQc,OAAS,GACtBC,EAAkBC,KACd,uBAAMtD,UAAW,gBAAiBwB,QAAS,kBAAMW,EAAc,IAA/D,cAAqE,KAArE,QAGR,IAP+B,eAOtBa,GACLK,EAAkBC,KACd,sBAAMtD,UAAWgD,GAAKd,EAAa,EAAI,2BAA6B,gBAAiBV,QAAS,kBAAMW,EAAca,EAAI,IAAtH,SAA2HA,EAAI,MAF9HA,EAAI,EAAGA,EAAK3D,EAAMiD,QAAQc,OAAS,GAAKJ,IAAM,EAA9CA,GAKT,OAAOK,EAkCkBE,WAKf,qBAAKvD,UAAU,mBAAf,wCCjGLwD,G,MAAY,SAACnE,GACtB,OACI,sBAAKW,UAAU,mBAAf,UACI,uBAAOc,KAAK,SAASO,YAAa,gCAAiCL,SAAU,SAACC,GAAD,OAAO5B,EAAMoE,kBAAkBxC,EAAEG,OAAOR,UACrH,sBAAKZ,UAAU,6BAAf,UACI,cAAC,IAAD,CAAiB0B,KAAMgC,MAD3B,iBCHCC,G,MAAU,WAEnB,MAAoCpD,mBAAS,IAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KACA,EAA8BtD,mBAAS,IAAvC,mBAAO+B,EAAP,KAAgBwB,EAAhB,KAiBA,OAfAC,qBAAU,WACNC,MACQ,iFACA,CACIC,OAAQ,QAGfC,KANL,uCAMU,WAAOC,GAAP,eAAAC,EAAA,sEACoBD,EAAIE,OADxB,OACI/B,EADJ,OAEFwB,EAAWxB,EAAQS,KAAI,SAACzC,GAAD,mBAAC,eAA6BA,GAA9B,IAAsCS,SAAS,QAFpE,2CANV,uDAUKuD,UAEN,IAGC,yBAAStE,UAAU,mBAAnB,SACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,EAAD,CAAWyD,kBAAmBI,IAC9B,cAAC,EAAD,CAASU,aAAcX,EAAYtB,QAASA,EAASD,cAAeyB,WClBrEU,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.0d74c7f9.chunk.js","sourcesContent":["import React from \"react\";\nimport { logger } from \"../Helpers/Logger\";\nimport '../common/styles.css';\n\nexport default class ErrorBoundary extends React.Component {\n\n    state = { \n        hasError: false \n    };\n\n    constructor(props: any) {\n      super(props);\n    }\n  \n    static getDerivedStateFromError(error: any) {\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error: any, errorInfo: any) {\n      logger(errorInfo);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        return (\n            <div className=\"error center\">\n                Something went wrong.\n            </div>\n        );\n      }\n  \n      return this.props.children; \n    }\n  }","/** \n * @param {string} message - message to log\n*/\nexport const logger = (message: string | JSON | any) => {\n    console.log((new Date().toISOString()) + \" --- \" + message);\n}","import { faCheck, faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useState } from \"react\"\nimport { ResultType } from \"../Results/Defaults\"\n\nimport './RowStyles.css';\n\nexport const Row = (resultProps: ResultRowProps) => {\n\n    const { result } = resultProps;\n\n    const [updatedData, setUpdatedData] = useState(result);\n\n    const saveResult = () => {\n        resultProps.editRow(result.id, false);\n        resultProps.UpdateResult(result.id, updatedData);\n    }\n\n    const updateData = (name: string, value: any) => {\n        setUpdatedData({\n            ...updatedData,\n            [name]: value\n        })\n    }\n\n    return (\n        <div className=\"resultRowWrapper center\">\n            {resultProps.editable ?\n                (\n                    <>\n                        <span className=\"checkbox\">\n                            <input\n                                type='checkbox'\n                                checked={result.checked}\n                                onChange={(e) => resultProps.UpdateResult(result.id, { checked: e.target.checked })}\n                            />\n                        </span>\n                        <input value={updatedData.name} placeholder=\"Name\" onChange={(e) => updateData('name', e.target.value)} />\n                        <input value={updatedData.email} placeholder=\"Email\" onChange={(e) => updateData('email', e.target.value)} />\n                        <input value={updatedData.role} placeholder=\"Role\" onChange={(e) => updateData('role', e.target.value)} />\n                        <span className=\"buttons\">\n                            <span className=\"saveButton button\" onClick={saveResult}>\n                                <FontAwesomeIcon icon={faCheck} />\n                            </span>\n                            <span className=\"deleteButton button\" onClick={() => resultProps.DeleteRecord(result.id)}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                        </span>\n                    </>\n                )\n                : (\n                    <>\n                        <span>\n                            <input\n                                type='checkbox'\n                                checked={result.checked}\n                                onChange={(e) => resultProps.UpdateResult(result.id, { checked: e.target.checked })}\n                            />\n                        </span>\n                        <span>{result.name}</span>\n                        <span>{result.email}</span>\n                        <span>{result.role}</span>\n                        <span className=\"buttons\">\n                            <span className=\"editButton button\" onClick={() => resultProps.editRow(result.id, true)}>\n                                <FontAwesomeIcon icon={faEdit} />\n                            </span>\n                            <span className=\"deleteButton button\" onClick={() => resultProps.DeleteRecord(result.id)}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                        </span>\n                    </>\n                )}\n        </div>\n    )\n}\n\ninterface ResultRowProps {\n    result: ResultType;\n    UpdateResult: any;\n    editable: boolean;\n    index: number;\n    editRow: any;\n    DeleteRecord: any;\n}","import { useState } from \"react\";\nimport { Row } from \"../Row/Row\";\nimport { ResultProps, ResultType } from \"./Defaults\";\n\nimport './ResultsStyles.css';\n\nexport const Results = (props: ResultProps) => {\n\n    const [editableRows, setEditableRows] = useState({} as any);\n    const [pageNumber, setPageNumber] = useState(1);\n\n    const handleSelectAll = (e: any) => {\n        props.updateResults((results: Array<ResultType>) => (\n            [...results.map((result, i) => (\n                i >= ((pageNumber-1) * 10) && i <= (pageNumber * 10)\n                    ? { ...result, checked: e?.target?.checked }\n                    : result\n            )\n            )]\n        ))\n    }\n\n    const UpdateResult = (id: string, data: any) => {\n        props.updateResults((results: Array<ResultType>) => {\n            const deepCopyResults = JSON.parse(JSON.stringify(results)) as Array<ResultType>;\n            const index = deepCopyResults.findIndex((result: ResultType) => result.id == id);\n            deepCopyResults[index] = {\n                ...deepCopyResults[index],\n                ...data,\n            }\n            return deepCopyResults;\n        })\n    }\n\n    const UpdateRowEditable = (id: string, editable: boolean) => {\n        setEditableRows({\n            ...editableRows,\n            [id]: editable,\n        })\n    }\n\n    const deleteSlectedRecords = () => {\n        props.updateResults((results: Array<ResultType>) => (results.filter(result => !result.checked)));\n        (document.getElementById('allselectedButton') as HTMLInputElement).checked = false;\n        setPageNumber(pageNumber=> (pageNumber < (props.results.length / 10) -1 ? pageNumber : 1 ))\n    }\n\n    const DeleteRecord = (id: string) => {\n        props.updateResults((results: Array<ResultType>) => (results.filter(result => result.id != id)));\n    }\n\n    const getPaginationButtons = () => {\n        const paginationButtons = [];\n        if(props.results.length > 0) {\n            paginationButtons.push(\n                <span className={'button center'} onClick={() => setPageNumber(1)}> {'<<'} </span>\n            )\n        }\n        for (let i = 0; i < (props.results.length / 10); i++) {\n            paginationButtons.push(\n                <span className={i == pageNumber - 1 ? 'button activePage center' : 'button center'} onClick={() => setPageNumber(i + 1)}>{i + 1}</span>\n            )\n        }\n        return paginationButtons;\n    }\n\n\n    return (\n        <>\n            {props.results\n                ? (\n                    <>\n                        <div className=\"resultsWrapper\">\n                            <div className=\"resultHeading center\">\n                                <input type=\"checkbox\" onClick={handleSelectAll} id=\"allselectedButton\" />\n                                <span> Name </span>\n                                <span> Email </span>\n                                <span> Role </span>\n                                <span> Actions </span>\n                            </div>\n                            {props.results.slice((pageNumber - 1) * 10 + 1, (pageNumber * 10)+1).map((result: ResultType, index: number) => (\n                                <Row\n                                    editable={editableRows[result.id] || false}\n                                    UpdateResult={UpdateResult}\n                                    index={index}\n                                    result={result}\n                                    key={index}\n                                    editRow={UpdateRowEditable}\n                                    DeleteRecord={DeleteRecord}\n                                />\n                            ))}\n                        </div>\n                        <div className=\"pagination\">\n                            <div className=\"deltedSeletecd button center\" onClick={deleteSlectedRecords}>\n                                Delete Selected\n                            </div>\n                            <div className=\"pageNumbers center\">\n                                {getPaginationButtons()}\n                            </div>\n                        </div>\n                    </>\n                )\n                : <div className=\"noResults center\"> Loading results......</div>\n            }\n        </>\n    );\n\n\n}","import { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { SearchProps } from './Defaults';\nimport './SearchBarStyles.css';\n\nexport const SearchBar = (props: SearchProps) => {\n    return (\n        <div className=\"searchBarWrapper\">\n            <input type=\"search\" placeholder={\"Search By name, email or role\"} onChange={(e) => props.handleSearchProps(e.target.value)} />\n            <div className=\"button searchButton center\">\n                <FontAwesomeIcon icon={faSearch} />\n                Search\n            </div>\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { Results } from '../Results';\nimport { ResultType } from '../Results/Defaults';\nimport { SearchBar } from '../SearchBar';\nimport './HompageStyles.css';\n\nexport const HomPage = () => {\n\n    const [searchText, setSearchText] = useState('');\n    const [results, setResults] = useState([] as Array<ResultType>);\n\n    useEffect(() => {\n        fetch(\n                'https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json', \n                {\n                    method: 'get',\n                }\n            )\n            .then(async (res) => {\n                const results = await res.json();\n                setResults(results.map((result: ResultType) => ({ ...result, checked: false })));\n            })\n            .catch();\n\n    }, []);\n\n    return (\n        <section className=\"containerWrapper\">\n            <div className=\"container center\">\n                <SearchBar handleSearchProps={setSearchText} />\n                <Results serachString={searchText} results={results} updateResults={setResults} />\n            </div>\n        </section>\n    );\n}","import './App.css';\nimport ErrorBoundary from \"./Components/ErrorBoundary\";\nimport { HomPage } from './Components/Hompage';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <HomPage />\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}